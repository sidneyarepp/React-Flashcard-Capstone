{"version":3,"sources":["utils/api/index.js","Layout/AddAndEditCardForm.js","Layout/AddCard.js","Layout/Card.js","Layout/CardList.js","Layout/CreateDeck.js","Layout/EditCard.js","Layout/EditDeck.js","Layout/DeckCard.js","Layout/DisplayDeckCards.js","Layout/StudyCard.js","Layout/NotEnoughCards.js","Layout/DisplayStudyDeck.js","Layout/Header.js","Layout/NotFound.js","Layout/index.js","App.js","index.js"],"names":["API_BASE_URL","process","headers","Headers","stripCards","deck","cards","fetchJson","url","options","onCancel","a","fetch","response","status","Error","statusText","json","name","console","error","stack","Promise","resolve","listDecks","signal","method","body","JSON","stringify","readDeck","deckId","updatedDeck","id","deleteDeck","card","Number","cardId","updatedCard","append","AddAndEditCardForm","deckData","cardInformation","handleLinkClick","handleChange","handleDoneAndCancelButton","handleSubmitAddCard","handleSubmitEditCard","addingCard","includes","className","to","onClick","icon","faHome","onSubmit","htmlFor","type","value","front","onChange","back","e","AddOrEditCard","setDeckData","setCardInformation","useParams","useRouteMatch","useEffect","AbortController","abort","then","deckInformation","catch","log","preventDefault","createCard","Card","deleteDeckInState","description","style","width","length","faEye","faBook","window","confirm","faTrashAlt","CardList","decks","setDecks","history","useHistory","filter","decksInformation","push","faPlus","map","CreateDeck","createDeckForm","setCreateDeckForm","target","event","createDeck","readCard","cardData","updateCard","EditDeck","updateDeck","DeckCard","deleteCardInState","faPencilAlt","deleteCard","DisplayDeckCards","setCards","data","StudyCard","currentCardIndex","setCurrentCardIndex","cardSide","setCardSide","handleCardFlip","title","NotEnoughCards","cardsQuantity","DisplayStudyDeck","Header","NotFound","Layout","useState","decksData","path","exact","EditCard","AddCard","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.ba9c7707.chunk.js","sourcesContent":["/**\n * Defines the base URL for the API.\n * The default values is overridden by the `API_BASE_URL` environment variable.\n */\nconst API_BASE_URL = process.env.API_BASE_URL || \"http://localhost:5000\";\n\n/**\n * Defines the default headers for these functions to work with `json-server`\n */\nconst headers = new Headers();\nheaders.append(\"Content-Type\", \"application/json\");\n\n/**\n * Removes the `cards` property from the deck so it is not accidentally saved with the deck.\n *\n * This function is NOT exported because it is not needed outside of this file.\n *\n * @param deck\n *  the deck instance\n * @returns {*}\n *  a copy of the deck instance with the `cards` property removed.\n */\nfunction stripCards(deck) {\n  const { cards, ...deckWithoutCards } = deck;\n  return deckWithoutCards;\n}\n\n/**\n * Fetch `json` from the specified URL and handle error status codes and ignore `AbortError`s\n *\n * This function is NOT exported because it is not needed outside of this file.\n *\n * @param url\n *  the url for the requst.\n * @param options\n *  any options for fetch\n * @param onCancel\n *  default value returned if the fetch is cancelled.\n * @returns {Promise<Error|any>}\n *  a promise that resolves to the `json` data or an error.\n *  If the response is not in the 200 - 399 range the promise is rejected.\n */\n\nasync function fetchJson(url, options, onCancel) {\n  try {\n    const response = await fetch(url, options);\n\n    if (response.status < 200 || response.status > 399) {\n      throw new Error(`${response.status} - ${response.statusText}`);\n    }\n\n    if (response.status === 204) {\n      return null;\n    }\n\n    return await response.json();\n\n  } catch (error) {\n    if (error.name !== \"AbortError\") {\n      console.error(error.stack);\n      throw error;\n    }\n    return Promise.resolve(onCancel);\n  }\n}\n\n/**\n * Retrieves all existing decks.\n * @returns {Promise<[deck]>}\n *  a promise that resolves to a possibly empty array of decks saved in the database.\n */\nexport async function listDecks(signal) {\n  const url = `${API_BASE_URL}/decks?_embed=cards`;\n  return await fetchJson(url, { signal }, []);\n}\n\n/**\n * Saves deck to the database (public/data/db.json).\n * There is no validation done on the deck object, any object will be saved.\n * @param deck\n *  the deck to save, which must not have an `id` property\n * @param signal\n *  optional AbortController.signal\n * @returns {Promise<deck>}\n *  a promise that resolves the saved deck, which will now have an `id` property.\n */\nexport async function createDeck(deck, signal) {\n  const url = `${API_BASE_URL}/decks`;\n  const options = {\n    method: \"POST\",\n    headers,\n    body: JSON.stringify(stripCards(deck)),\n    signal,\n  };\n  return await fetchJson(url, options, {});\n}\n\n/**\n * Retrieves the deck with the specified `deckId`\n * @param deckId\n *  the `id` property matching the desired deck.\n * @param signal\n *  optional AbortController.signal\n * @returns {Promise<any>}\n *  a promise that resolves to the saved deck.\n */\nexport async function readDeck(deckId, signal) {\n  const url = `${API_BASE_URL}/decks/${deckId}?_embed=cards`;\n  return await fetchJson(url, { signal }, {});\n}\n\n/**\n * Updates an existing deck\n * @param updatedDeck\n *  the deck to save, which must have an `id` property.\n * @param signal\n *  optional AbortController.signal\n * @returns {Promise<Error|*>}\n *  a promise that resolves to the updated deck.\n */\nexport async function updateDeck(updatedDeck, signal) {\n  const url = `${API_BASE_URL}/decks/${updatedDeck.id}?_embed=cards`;\n  const options = {\n    method: \"PUT\",\n    headers,\n    body: JSON.stringify(stripCards(updatedDeck)),\n    signal,\n  };\n  return await fetchJson(url, options, updatedDeck);\n}\n\n/**\n * Deletes the deck with the specified `deckId`.\n * @param deckId\n *  the id of the deck to delete\n * @param signal\n *  optional AbortController.signal\n * @returns {Promise<Error|*>}\n *  a promise that resolves to an empty object.\n */\nexport async function deleteDeck(deckId, signal) {\n  const url = `${API_BASE_URL}/decks/${deckId}`;\n  const options = { method: \"DELETE\", signal };\n  return await fetchJson(url, options);\n}\n\n/**\n * Retrieves all cards associated with the specified `deckId`.\n * @param deckId\n *  the id of the target deck\n * @param signal\n *  optional AbortController.signal\n * @returns {Promise<Error|*>}\n *  a promise that resolves to a possible empty array of cards.\n */\nexport async function listCards(deckId, signal) {\n  const url = `${API_BASE_URL}/cards?deckId=${deckId}`;\n  return await fetchJson(url, { signal }, []);\n}\n\n/**\n * Creates a new card associated with the specified `deckId`.\n * There is no validation that there is an existing deck with the specified `deckId`.\n * @param deckId\n *  the id of the target deck\n * @param card\n *  the card to create, which must not have an `id` property\n * @param signal\n *  optional AbortController.signal\n * @returns {Promise<Error|*>}\n *  a promise that resolves to the new card, which will have an `id` property.\n */\nexport async function createCard(deckId, card, signal) {\n  // There is a bug in json-server, if you post to /decks/:deckId/cards the associated deckId is a string\n  // and the card is not related to the deck because the data types of the ID's are different.\n  const url = `${API_BASE_URL}/cards`;\n  card.deckId = Number(deckId);\n  const options = {\n    method: \"POST\",\n    headers,\n    body: JSON.stringify(card),\n    signal,\n  };\n  return await fetchJson(url, options, card);\n}\n\n/**\n * Retrieves the card with the specified `cardId`\n * @param cardId\n *  the id of the target\n * @param signal\n *  optional AbortController.signal\n * @returns {Promise<Error|*>}\n *  a promise that resolves to the saved card.\n */\nexport async function readCard(cardId, signal) {\n  const url = `${API_BASE_URL}/cards/${cardId}`;\n  return await fetchJson(url, { signal }, {});\n}\n\n/**\n * Updates an existing deck\n * @param updatedCard\n *  the card to save, which must have an `id` property.\n * @param signal\n *  optional AbortController.signal\n * @returns {Promise<Error|*>}\n *  a promise that resolves to the updated card.\n */\nexport async function updateCard(updatedCard, signal) {\n  const url = `${API_BASE_URL}/cards/${updatedCard.id}`;\n  const options = {\n    method: \"PUT\",\n    headers,\n    body: JSON.stringify(updatedCard),\n  };\n  return await fetchJson(url, options, updatedCard);\n}\n\n/**\n * Deletes the card with the specified `cardId`.\n * @param cardId\n *  the id of the card to delete\n * @param signal\n *  optional AbortController.signal\n * @returns {Promise<Error|*>}\n *  a promise that resolves to an empty object.\n */\nexport async function deleteCard(cardId, signal) {\n  const url = `${API_BASE_URL}/cards/${cardId}`;\n  const options = { method: \"DELETE\", signal };\n  return await fetchJson(url, options);\n}\n","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faHome } from \"@fortawesome/free-solid-svg-icons\";\n\nfunction AddAndEditCardForm({ deckData, cardInformation, handleLinkClick, handleChange, handleDoneAndCancelButton, deckId, cardId, handleSubmitAddCard, handleSubmitEditCard, url }) {\n\n    function doneAndCancelClick(e) {\n        handleDoneAndCancelButton(e, deckId)\n    }\n\n    const addingCard = url.includes('new')\n\n    return (\n        <div>\n            <p className=\"bg-light p-2 rounded\"><Link to={'/'} onClick={handleLinkClick}><FontAwesomeIcon icon={faHome} /> Home</Link> / <Link to={`/decks/${deckId}`} onClick={handleLinkClick}>{deckData.name}</Link> / {addingCard ? <span>Add Card</span> : `Edit Card ${cardId}`}</p>\n            <h1 className=\"mb-3\">{deckData.name}: <span>Add Card</span></h1>\n            <form onSubmit={addingCard ? handleSubmitAddCard : handleSubmitEditCard} className=\"border p-4 rounded\">\n                <label htmlFor='front' className=\"form-label\">Front</label>\n                <textarea type='text' className=\"form-control\" name='front' id='front' value={cardInformation.front} onChange={handleChange} />\n                <label htmlFor='back' className=\"form-label\">Back</label>\n                <textarea type='text' className=\"form-control\" name='back' id='back' value={cardInformation.back} onChange={handleChange} />\n                <div className=\"mt-3\">\n                    <button onClick={doneAndCancelClick} className='btn btn-secondary'>{addingCard ? 'Done' : 'Cancel'}</button>\n                    <button type='submit' className='btn btn-primary ml-2'>{addingCard ? 'Save' : 'Submit'}</button>\n                </div>\n            </form>\n        </div>\n    )\n}\n\nexport default AddAndEditCardForm;\n\n\n\n\n","import React, { useEffect } from 'react';\nimport AddAndEditCardForm from './AddAndEditCardForm';\nimport { useParams, useRouteMatch } from 'react-router-dom';\nimport { readDeck, createCard } from '../utils/api';\n\n//This component handles the Add Card functionality.\nfunction AddOrEditCard({ deckData, setDeckData, cardInformation, setCardInformation, handleDoneAndCancelButton, handleLinkClick, handleChange }) {\n\n    const { deckId } = useParams();\n    const { url } = useRouteMatch();\n\n    //The useEffect will set the deck state to match the deckId.  \n    useEffect(() => {\n        const { signal, abort } = new AbortController();\n\n\n        readDeck(deckId, signal)\n            .then(deckInformation => setDeckData(deckInformation))\n            .catch(error => {\n                if (error.name === 'AbortError') {\n                    console.log('Fetch Aborted');\n                } else {\n                    throw error;\n                }\n            })\n\n        return () => abort;\n    }, [deckId, setDeckData])\n\n    //Submit handler for when the user is adding a new card to the deck.\n    function handleSubmitAddCard(e) {\n        e.preventDefault();\n        const { signal } = new AbortController();\n\n        createCard(deckId, cardInformation, signal).then(setCardInformation({})).catch(error => {\n            if (error.name === 'AbortError') {\n                console.log('Fetch Cancelled');\n            } else {\n                throw error;\n            }\n        })\n        setCardInformation({ front: '', back: '' })\n    }\n\n\n    return (\n        <AddAndEditCardForm deckData={deckData} cardInformation={cardInformation} handleLinkClick={handleLinkClick} handleChange={handleChange} handleDoneAndCancelButton={handleDoneAndCancelButton} deckId={deckId} handleSubmitAddCard={handleSubmitAddCard} url={url} />\n    )\n}\n\nexport default AddOrEditCard;","import React from 'react';\r\nimport { Link } from \"react-router-dom\";\r\nimport { deleteDeck } from \"../utils/api/index\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faTrashAlt, faEye, faBook } from \"@fortawesome/free-solid-svg-icons\";\r\n\r\n//This is a sub-component of the CardList component.\r\nfunction Card({ deck, deleteDeckInState }) {\r\n  const { id, name, description, cards } = deck;\r\n  const { signal } = new AbortController();\r\n\r\n  //Delete handler for if/when the customer clicks on the delete button on the home page.\r\n  function handleDelete() {\r\n    const result = window.confirm(\"Delete this deck?\\n\\nYou will not be able to recover it.\");\r\n    if (result) {\r\n      deleteDeck(id, signal)\r\n        .then(deleteDeckInState(id))\r\n        .catch(error => {\r\n          if (error.name === 'AbortError') {\r\n            console.log('Fetch Aborted')\r\n          } else {\r\n            throw error\r\n          }\r\n        })\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div className=\"card\" style={{ width: \"30rem\" }}>\r\n      <div className=\"card-body\">\r\n        <div className=\"row\">\r\n          <h5 className=\"card-title col col-9\">{name}</h5>\r\n          <span className=\"col col-3 text-right\">{cards.length} cards</span>\r\n        </div>\r\n        <p className=\"card-text\">{description}</p>\r\n        <div className=\"row\">\r\n          <div className=\"col col-9\">\r\n            <Link to={`/decks/${id}`} className=\"card-link\">\r\n              <button type=\"button\" className=\"btn btn-secondary\">\r\n                View <FontAwesomeIcon icon={faEye} />\r\n              </button>\r\n            </Link>\r\n            <Link to={`/decks/${id}/study`} className=\"card-link\">\r\n              <button type=\"button\" className=\"btn btn-primary\">\r\n                Study <FontAwesomeIcon icon={faBook} />\r\n              </button>\r\n            </Link>\r\n          </div>\r\n          <div className=\"col col-3 text-right\">\r\n            <button\r\n              type=\"button\"\r\n              className=\"btn btn-danger\"\r\n              onClick={handleDelete}\r\n            >\r\n              <FontAwesomeIcon icon={faTrashAlt} />\r\n            </button>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Card;\r\n","import React, { useEffect } from 'react';\r\nimport Card from './Card';\r\nimport { listDecks } from \"../utils/api\";\r\nimport { useHistory } from 'react-router-dom';\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faPlus } from \"@fortawesome/free-solid-svg-icons\";\r\n\r\n//This component handles loading the home page decks found in the database.\r\nfunction CardList({ decks, setDecks }) {\r\n\r\n  const history = useHistory();\r\n\r\n  //This sets the decks state to be all of the decks found in the database.\r\n  useEffect(() => {\r\n    const signal = new AbortController().signal;\r\n\r\n    listDecks(signal)\r\n      .then(decksInformation => setDecks(decksInformation))\r\n      .catch(error => {\r\n        if (error.name === 'AbortError') {\r\n          console.log('Fetch Aborted')\r\n        } else {\r\n          throw error\r\n        }\r\n      })\r\n  }, [setDecks])\r\n\r\n  //Handler for when the user clicks on the 'Create Deck' button.\r\n  function handleCreateClick() {\r\n    history.push('/decks/new')\r\n  }\r\n\r\n  //Handler to delete the deck in state the customer chooses to delete.  This triggers a re-render to update the card list.\r\n  function deleteDeckInState(id) {\r\n    setDecks(decks.filter(deck => deck.id !== id))\r\n  }\r\n\r\n  return (\r\n    <div className=\"d-flex flex-column\">\r\n      <div className=\"d-flex flex-row\">\r\n        <button className=\"btn btn-lg btn-secondary mb-3\" onClick={handleCreateClick}>\r\n          <FontAwesomeIcon icon={faPlus} /> Create Deck\r\n        </button>\r\n      </div>\r\n      {decks.map((deck) => (\r\n        <div className=\"d-flex flex-row mb-3\" key={deck.id}>\r\n          <Card\r\n            deleteDeckInState={deleteDeckInState}\r\n            deck={deck}\r\n          />\r\n        </div>\r\n      ))}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default CardList;\r\n","import React from 'react';\nimport { useHistory, Link } from 'react-router-dom';\nimport { createDeck } from '../utils/api/index';\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faHome } from \"@fortawesome/free-solid-svg-icons\";\n\n//This component is a sub-component of the 'CardList' component.  It handles the logic for when a user clicks the 'Create Deck' button.\nfunction CreateDeck({ createDeckForm, setCreateDeckForm }) {\n\n    const history = useHistory();\n\n    //Universal form change handler for any input the user adds to the createDeck form.\n    function handleChange(e) {\n        setCreateDeckForm({ ...createDeckForm, [e.target.name]: e.target.value });\n    }\n\n    //Handler for if the user clicks the cancel button in the createDeck form.\n    function handleCancel(e) {\n        e.preventDefault();\n        setCreateDeckForm({ name: '', description: '' });\n        history.push('/');\n    }\n\n    //Submit handler for the createDeck form.\n    function handleSubmit(event) {\n        const { signal } = new AbortController();\n        event.preventDefault();\n        createDeck(createDeckForm, signal)\n            .then(setCreateDeckForm({ name: '', description: '' }))\n            .then(history.push('/'))\n            .catch(error => {\n                if (error.name === 'AbortError') {\n                    console.log('Fetch Cancelled');\n                } else {\n                    throw error;\n                }\n            })\n    }\n\n    return (\n        <div>\n            <p className=\"bg-light p-2 rounded\"><Link to={'/'}><FontAwesomeIcon icon={faHome} /> Home</Link> / Create Deck</p>\n            <h1>Create Deck</h1>\n            <form className=\"border p-4 rounded\">\n                <label htmlFor='name' className=\"form-label\">Name:</label>\n                <input type='text' id='name' className=\"form-control\" name='name' value={createDeckForm.name} onChange={handleChange} />\n                <label htmlFor='description' className=\"form-label mt-2\">Description</label>\n                <textarea type='text' id='description' className=\"form-control\" name='description' value={createDeckForm.description} onChange={handleChange} />\n                <div className=\"mt-3\">\n                    <button className='btn btn-secondary' onClick={handleCancel}>Cancel</button>\n                    <button className='btn btn-primary ml-2' type='submit' onClick={handleSubmit}>Submit</button>\n                </div>\n            </form>\n        </div>\n    )\n}\n\nexport default CreateDeck;","import React, { useEffect } from 'react';\nimport AddAndEditCardForm from './AddAndEditCardForm';\nimport { useParams, useHistory, useRouteMatch } from 'react-router-dom';\nimport { readDeck, readCard, updateCard } from '../utils/api';\n\n//This component handles the Add Card and Edit Card functionality.\nfunction AddOrEditCard({ deckData, setDeckData, cardInformation, setCardInformation, handleDoneAndCancelButton, handleLinkClick, handleChange }) {\n\n    const history = useHistory();\n    const { deckId, cardId } = useParams();\n    const { url } = useRouteMatch();\n\n    //The useEffect will set the deck state to match the deckId, as well as setting the currentCard state so the front and back data will be pre-filled in the edit form.\n    useEffect(() => {\n        const { signal, abort } = new AbortController();\n\n        readDeck(deckId, signal)\n            .then(deckInformation => setDeckData(deckInformation))\n            .catch(error => {\n                if (error.name === 'AbortError') {\n                    console.log('Fetch Aborted');\n                } else {\n                    throw error;\n                }\n            })\n\n        readCard(cardId, signal)\n            .then(cardData => setCardInformation(cardData))\n            .catch(error => {\n                if (error.name === 'AbortError') {\n                    console.log('Fetch Aborted');\n                } else {\n                    throw error;\n                }\n            })\n\n\n        return () => abort;\n    }, [deckId, setDeckData, setCardInformation, cardId])\n\n\n    //Submit handler for when the user is editing an existing deck.\n    function handleSubmitEditCard(e) {\n        e.preventDefault();\n        updateCard(cardInformation)\n            .then(setCardInformation({ front: '', back: '' }))\n            .then(history.push(`/decks/${deckId}`))\n    }\n\n\n    return (\n        <AddAndEditCardForm deckData={deckData} cardInformation={cardInformation} handleDoneAndCancelButton={handleDoneAndCancelButton} handleLinkClick={handleLinkClick} handleChange={handleChange} deckId={deckId} cardId={cardId} handleSubmitEditCard={handleSubmitEditCard} url={url} />\n    )\n}\n\nexport default AddOrEditCard;","import React, { useEffect } from 'react';\nimport { Link, useParams, useHistory } from 'react-router-dom';\nimport { readDeck, updateDeck } from '../utils/api';\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faHome } from \"@fortawesome/free-solid-svg-icons\";\n\n//This component is a sub-component of the 'DisplayDeckCards' component.  It handles the functionality for when a user clicks the 'Edit' button for the deck..\nfunction EditDeck({ deckData, setDeckData }) {\n\n    const { deckId } = useParams();\n    const history = useHistory();\n\n\n    useEffect(() => {\n        const { signal, abort } = new AbortController();\n\n        //When the component mounts the deckData state is updated to reflect the deck chosen by the user.\n        readDeck(deckId, signal)\n            .then(deckInformation => setDeckData(deckInformation))\n            .catch(error => {\n                if (error.name === 'AbortError') {\n                    console.log('Fetch Aborted');\n                } else {\n                    throw error;\n                }\n            })\n        return () => abort;\n    }, [deckId, setDeckData])\n\n    //Universal change handler for the editDeck form.\n    function handleChange(e) {\n        setDeckData({ ...deckData, [e.target.name]: e.target.value })\n    }\n\n    //Form submission handler for the editDeck component.\n    function handleSubmit(e) {\n        e.preventDefault();\n        const { signal } = new AbortController();\n\n        updateDeck(deckData, signal)\n            .then(setDeckData(deckData))\n            .then(history.push(`/decks/${deckId}`))\n            .catch(error => {\n                if (error.name === 'AbortError') {\n                    console.log('Fetch Aborted');\n                } else {\n                    throw error;\n                }\n            })\n    }\n\n    return (\n        <div>\n            <p className=\"bg-light p-2 rounded\"><Link to={'/'}><FontAwesomeIcon icon={faHome} /> Home</Link> / <Link to={`/decks/${deckId}`} >{deckData.name}</Link> / Edit Deck</p>\n            <h1 className=\"mb-3\">Edit Deck</h1>\n            <form onSubmit={handleSubmit} className=\"border p-4 rounded\">\n                <label htmlFor='name' className=\"form-label\">Name</label>\n                <input type='text' className=\"form-control\" name='name' id='name' onChange={handleChange} value={deckData.name} />\n                <label htmlFor='description' className=\"form-label\">Description</label>\n                <textarea type='text' className=\"form-control\" name='description' id='description' onChange={handleChange} value={deckData.description} />\n                <div className=\"mt-3\">\n                    <Link to={`/decks/${deckId}`} className='btn btn-secondary'>Cancel</Link>\n                    <button type='submit' className='btn btn-primary ml-2'>Submit</button>\n                </div>\n            </form>\n        </div >\n    )\n}\n\nexport default EditDeck;","import React from 'react';\nimport { Link, useRouteMatch } from 'react-router-dom'\nimport { deleteCard } from '../utils/api';\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faPencilAlt, faTrashAlt } from \"@fortawesome/free-solid-svg-icons\";\n\n//This is a sub-component of the DisplayDeckCards component.\nfunction DeckCard({ card, deleteCardInState }) {\n    const { id, front, back } = card;\n    const { url } = useRouteMatch();\n\n    //Handler for if the user chooses to delete a card from a deck.\n    function handleDeleteCard() {\n        const { signal } = new AbortController();\n        const response = window.confirm('Delete this deck?\\n\\nYou will not be able to recover it.')\n        if (response) {\n            deleteCard(id, signal).then(deleteCardInState(id)).catch(error => {\n                if (error.name === 'AbortError') {\n                    console.log('Fetch Cancelled');\n                } else {\n                    throw error\n                };\n            })\n        }\n    };\n\n    return (\n        <div className=\"card d-flex mb-3\" style={{ width: \"30rem\" }} id={id}>\n            <div className=\"card-body\">\n                <div>\n                    <h6><span className=\"text-primary\">Front:</span> {front}</h6>\n                </div>\n                <div className=\"my-3\">\n                    <h6><span className=\"text-primary\">Back:</span> {back}</h6>\n                </div>\n                <div className='row'>\n                    <Link to={`${url}/cards/${id}/edit`} className=\"btn btn-primary ml-3\"><FontAwesomeIcon icon={faPencilAlt} /> Edit</Link>\n                    <button className=\"btn btn-danger ml-2\" onClick={handleDeleteCard}><FontAwesomeIcon icon={faTrashAlt} /></button>\n                </div>\n            </div>\n        </div>\n    )\n};\n\nexport default DeckCard;","import React, { useEffect } from 'react';\nimport { Link, useRouteMatch, useParams, useHistory } from 'react-router-dom';\nimport { readDeck, deleteDeck } from '../utils/api';\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faPencilAlt, faTrashAlt, faBook, faPlus, faHome } from \"@fortawesome/free-solid-svg-icons\";\nimport DeckCard from './DeckCard';\n\n//This component displays the deck information and all of the cards in the deck when the user clicks the 'View' button on the home page.\nfunction DisplayDeckCards({ deckData, setDeckData, cards, setCards }) {\n    const { id, name, description } = deckData;\n    const history = useHistory();\n    const { deckId } = useParams();\n    const { url } = useRouteMatch();\n\n    //Function to delete a card from the cards state.\n    function deleteCardInState(id) {\n        setCards(cards.filter(card => card.id !== id));\n    }\n\n    //Handler for if the user chooses to delete the deck while viewing the deck.\n    function handleDeleteDeck() {\n        const { signal, abort } = new AbortController();\n        const response = window.confirm('Delete this deck?\\n\\nYou will not be able to recover it.')\n        if (response) {\n            deleteDeck(id, signal).then(history.push('/')).catch(error => {\n                if (error.name === 'AbortError') {\n                    console.log('Fetch Aborted')\n                } else {\n                    throw error\n                }\n            })\n        }\n        return () => abort;\n    }\n\n    //When the 'View' button is clicked for a deck the state 'deck' and 'cards' are updated to reflect the ceck the user clicked the 'View' button for.\n    useEffect(() => {\n        const { signal, abort } = new AbortController();\n\n        readDeck(deckId, signal)\n            .then(data => {\n                setDeckData(data);\n                setCards(data.cards);\n            });\n\n        return () => abort;\n    }, [deckId, setCards, setDeckData])\n\n    return (\n        <div>\n            <p className=\"bg-light p-2 rounded\"><Link to={'/'}><FontAwesomeIcon icon={faHome} /> Home</Link> / {deckData.name}</p>\n            <h3>{name}</h3>\n            <p>{description}</p>\n            <div className=\"mb-2\">\n                <Link to={`${url}/edit`} className=\"btn btn-secondary\"><FontAwesomeIcon icon={faPencilAlt} /> Edit</Link>\n                <Link to={`${url}/study`} className=\"btn btn-primary ml-2\"><FontAwesomeIcon icon={faBook} /> Study</Link>\n                <Link to={`${url}/cards/new`} className=\"btn btn-primary ml-2\"><FontAwesomeIcon icon={faPlus} /> Add Cards</Link>\n                <button type='button' className=\"btn btn-danger ml-2\" onClick={handleDeleteDeck}><FontAwesomeIcon icon={faTrashAlt} /></button>\n            </div>\n            <h2>Cards</h2>\n            {cards.map(card => <DeckCard card={card} key={card.id} deleteCardInState={deleteCardInState} url={url} />)}\n        </div>\n    )\n}\n\nexport default DisplayDeckCards;","import React from 'react';\n\n//This is a sub-component of the 'DisplayStudyDeck' component.  It handles the styling and functionality of the cards.\nfunction StudyCard({ deckData, currentCardIndex, setCurrentCardIndex, cards, cardInformation, history, cardSide, setCardSide, setCardInformation }) {\n\n    //Handler for which side of the card is displayed when the user clicks the 'Flip' button.\n    function handleCardFlip() {\n        if (cardSide === 'front') {\n            setCardSide('back')\n        } else {\n            setCardSide('front')\n        }\n    }\n\n    //Handler for when the user clicks the 'Next' button.  If the card isn't the last in the deck it goes to the next card.  If the card is the last in the deck the user gets an option to start over, or cancel and return to the home page.\n    function handleNextCard() {\n        if (currentCardIndex < deckData.cards.length - 1) {\n            setCurrentCardIndex(currentCardIndex + 1);\n            setCardSide('front');\n        } else {\n            const response = window.confirm('Restart cards?\\n\\nClick \"Cancel\" to return to the home page.')\n            if (response) {\n                setCurrentCardIndex(0);\n                setCardSide('front');\n            } else {\n                setCardInformation({ front: '', back: '' });\n                setCurrentCardIndex(0);\n                setCardSide('front');\n                history.push('/')\n            }\n        }\n    }\n\n    //Conditional logic to handle the card rendering based on the state variable 'cardSide'.\n    if (cardSide === 'front') {\n        return (\n            <div className=\"card\" style={{ width: \"30rem\" }}>\n                <div className=\"card-body\">\n                    <h4>Card {currentCardIndex + 1} of {cards.length}</h4>\n                    <h5 className=\"card-title\">{cardInformation.title}</h5>\n                    <p className=\"card-text\">{cardInformation.front}</p>\n                    <button className=\"btn btn-secondary\" onClick={handleCardFlip}>Flip</button>\n                </div>\n            </div>\n        )\n    } else {\n        return (\n            <div className=\"card\" style={{ width: \"30rem\" }}>\n                <div className=\"card-body\">\n                    <h4>Card {currentCardIndex + 1} of {deckData.cards.length}</h4>\n                    <h5 className=\"card-title\">{cardInformation.title}</h5>\n                    <p className=\"card-text\">{cardInformation.back}</p>\n                    <button className=\"btn btn-secondary\" onClick={handleCardFlip}>Flip</button>\n                    <button className=\"btn btn-primary ml-2\" onClick={handleNextCard}>Next</button>\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default StudyCard;","import React from 'react';\nimport { Link, useParams } from 'react-router-dom';\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faPlus } from \"@fortawesome/free-solid-svg-icons\";\n\n//This component is a sub-component of the 'DisplayStudyDeck' component.  It is rendered if the user tries to study a deck with less than 3 cards in it. \nfunction NotEnoughCards({ cardsQuantity }) {\n\n    const { deckId } = useParams();\n\n    return (\n        <div>\n            <h2>Not enough cards</h2>\n            <p>You need at least 3 cards to study.  There {cardsQuantity === 1 ? `is 1 card` : `are ${cardsQuantity} cards`} in this deck.</p>\n            <Link to={`/decks/${deckId}/cards/new`} className=\"btn btn-primary\"><FontAwesomeIcon icon={faPlus} /> <span>Add Cards</span></Link>\n        </div>\n    )\n}\n\nexport default NotEnoughCards;","import React, { useEffect } from 'react';\nimport { Link, useParams, useHistory } from 'react-router-dom';\nimport { readDeck } from '../utils/api';\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faHome } from \"@fortawesome/free-solid-svg-icons\";\nimport StudyCard from './StudyCard';\nimport NotEnoughCards from './NotEnoughCards';\n\n//This component handles the rendering for when the user clicks the 'Study' button on the home page or view deck screens.\nfunction DisplayStudyDeck({ cardSide, setCardSide, deckData, setDeckData, cards, setCards, cardInformation, setCardInformation, currentCardIndex, setCurrentCardIndex }) {\n\n    const { deckId } = useParams();\n    const history = useHistory();\n\n    //When the component is mounted the state deckData, cards, and cardInformation are set based on the deck the user chooses to study.  The inital card shown will always be the first in the deck.\n    useEffect(() => {\n        const { signal } = new AbortController();\n\n        readDeck(deckId, signal)\n            .then(deckInformation => {\n                setDeckData(deckInformation);\n                setCards(deckInformation.cards);\n                setCardInformation(deckInformation.cards[currentCardIndex]);\n            }\n            )\n            .catch(error => {\n                if (error.name === 'AbortError') {\n                    console.log('Fetch Aborted')\n                } else {\n                    throw error\n                }\n            })\n    }, [deckId, currentCardIndex, setCardInformation, setCards, setDeckData])\n\n    //Click handler for when the user clicks on any of the breadcrumb links to make sure the cardInformation state is reset in case someone needs to add a new card or edit an existing card.\n    function handleLinkClick() {\n        setCardInformation({ front: '', back: '' });\n        setCurrentCardIndex(0);\n        setCardSide('front');\n    }\n\n    return (\n        <div>\n            <p className=\"bg-light p-2 rounded\"><Link to={'/'} onClick={handleLinkClick}><FontAwesomeIcon icon={faHome} /> Home</Link> / <Link to={`/decks/${deckId}`} onClick={handleLinkClick}>{deckData.name}</Link> / Study</p>\n            <h1 className=\"mb-4\">Study: {deckData.name}</h1>\n            {cards.length > 2 ?\n                <StudyCard deckData={deckData} currentCardIndex={currentCardIndex} setCurrentCardIndex={setCurrentCardIndex} cardInformation={cardInformation} cards={cards} history={history} cardSide={cardSide} setCardSide={setCardSide} setCardInformation={setCardInformation} />\n                :\n                <NotEnoughCards cardsQuantity={cards.length} />\n            }\n        </div>\n    )\n}\n\nexport default DisplayStudyDeck;","import React from \"react\";\n\n//Component initially provided by Thinkful to display a header.\nfunction Header() {\n  return (\n    <header className=\"jumbotron bg-dark\">\n      <div className=\"container text-white\">\n        <h1 className=\"display-4\">Flashcard-o-matic</h1>\n        <p className=\"lead\">Discover The Flashcard Difference.</p>\n      </div>\n    </header>\n  );\n}\n\nexport default Header;\n","import React from \"react\";\n\n//This component is a sub-component of the 'index' component.  It was provided by Thinkful to display any time a user tries to visit a path that doesn't exist.\nfunction NotFound() {\n  return (\n    <div className=\"NotFound\">\n      <h1>Not Found</h1>\n    </div>\n  );\n}\n\nexport default NotFound;\n","import React, { useState, useEffect } from \"react\";\nimport { Switch, Route, useHistory } from \"react-router-dom\";\nimport { listDecks } from '../utils/api/index';\nimport AddCard from './AddCard';\nimport CardList from \"./CardList\";\nimport CreateDeck from './CreateDeck';\nimport EditCard from './EditCard';\nimport EditDeck from \"./EditDeck\";\nimport DisplayDeckCards from \"./DisplayDeckCards\";\nimport DisplayStudyDeck from \"./DisplayStudyDeck\";\nimport Header from \"./Header\";\nimport NotFound from \"./NotFound\";\n\n\n//This component holds all of the universal state, as well as the routing logic.\nfunction Layout() {\n\n  const [cards, setCards] = useState([]);\n  const [cardInformation, setCardInformation] = useState({ front: '', back: '' });\n  const [cardSide, setCardSide] = useState('front');\n  const [createDeckForm, setCreateDeckForm] = useState({ name: '', description: '' });\n  const [currentCardIndex, setCurrentCardIndex] = useState(0);\n  const [decks, setDecks] = useState([]);\n  const [deckData, setDeckData] = useState({ name: '', description: '' });\n  const history = useHistory();\n\n  //When the user visits the site home page the decks state is set to all decks currently found in the database.\n  useEffect(() => {\n    const { signal, abort } = new AbortController();\n\n    listDecks(signal)\n      .then(decksData => setDecks(decksData))\n      .catch(error => {\n        if (error.name === 'AbortError') {\n          console.log('Fetch Aborted');\n        } else {\n          throw error;\n        }\n      })\n\n    return () => abort;\n  }, [])\n\n\n  //Click handler to reset the cardInformation state, currentCardIndex, and cardSide if the user chooses to navigate back to the deck or the home page using the breadcrumb links.\n  function handleLinkClick() {\n    setCardInformation({ front: '', back: '' });\n    setCurrentCardIndex(0);\n    setCardSide('front');\n  }\n\n  //Change handler to make the form a controlled form.\n  function handleChange(e) {\n    setCardInformation({ ...cardInformation, [e.target.name]: e.target.value });\n  }\n\n  //Handler to reset the cardInformation state if a customer clicks the Done button when adding cards.\n  function handleDoneAndCancelButton(e, deckId) {\n    e.preventDefault();\n    setCardInformation({ front: '', back: '' });\n    history.push(`/decks/${deckId}`);\n  }\n\n  return (\n    <section>\n      <Header />\n      <div className=\"container\">\n        {/* TODO: Implement the screen starting here */}\n        <Switch>\n          <Route path='/' exact>\n            <CardList decks={decks} setDecks={setDecks} />\n          </Route>\n          <Route path='/decks/new'>\n            <CreateDeck createDeckForm={createDeckForm} setCreateDeckForm={setCreateDeckForm} />\n          </Route>\n          <Route path='/decks/:deckId' exact>\n            <DisplayDeckCards cards={cards} setCards={setCards} deckData={deckData} setDeckData={setDeckData} />\n          </Route>\n          <Route path='/decks/:deckId/edit'>\n            <EditDeck deckData={deckData} setDeckData={setDeckData} />\n          </Route>\n          <Route path='/decks/:deckId/study'>\n            <DisplayStudyDeck cardSide={cardSide} setCardSide={setCardSide} deckData={deckData} setDeckData={setDeckData} cards={cards} setCards={setCards} cardInformation={cardInformation} setCardInformation={setCardInformation} currentCardIndex={currentCardIndex} setCurrentCardIndex={setCurrentCardIndex} handleDoneAndCancelButton={handleDoneAndCancelButton} handleLinkClick={handleLinkClick} />\n          </Route>\n          <Route path='/decks/:deckId/cards/:cardId/edit'>\n            <EditCard deckData={deckData} setDeckData={setDeckData} cardInformation={cardInformation} setCardInformation={setCardInformation} setCurrentCardIndex={setCurrentCardIndex} setCardSide={setCardSide} handleDoneAndCancelButton={handleDoneAndCancelButton} handleLinkClick={handleLinkClick} handleChange={handleChange} />\n          </Route>\n          <Route path='/decks/:deckId/cards/new'>\n            <AddCard deckData={deckData} setDeckData={setDeckData} cardInformation={cardInformation} setCardInformation={setCardInformation} setCurrentCardIndex={setCurrentCardIndex} setCardSide={setCardSide} handleChange={handleChange} handleDoneAndCancelButton={handleDoneAndCancelButton} handleLinkClick={handleLinkClick} />\n          </Route>\n          <Route>\n            <NotFound />\n          </Route>\n        </Switch>\n      </div>\n    </section>\n  );\n}\n\nexport default Layout;\n","import React from \"react\";\nimport { Route, Switch } from \"react-router-dom\";\nimport Layout from \"./Layout\";\n\n/**\n * App is a wrapper for <Layout>, you should not need to change this file.\n */\n\nfunction App() {\n  return (\n    <div className=\"app-routes\">\n      <Switch>\n        <Route path=\"/\">\n          <Layout />\n        </Route>\n      </Switch>\n    </div>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport { BrowserRouter as Router } from \"react-router-dom\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <Router>\n      <App />\n    </Router>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}